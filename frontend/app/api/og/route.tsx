import { ImageResponse } from "next/og";
import { NextRequest } from "next/server";

export const runtime = "edge";

export function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const src = searchParams.get("src") || "";
  const title = searchParams.get("title") || "";

  const response = new ImageResponse(
    (
      <div
        style={{
          width: "100%",
          height: "100%",
          display: "flex",
          position: "relative",
          overflow: "hidden",
        }}
      >
        <img
          src={src}
          alt="Background"
          style={{
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
            objectFit: "cover",
            objectPosition: "center",
          }}
        />
        {/* Logo watermark in top left */}
        <div
          style={{
            position: "absolute",
            top: "24px",
            left: "24px",
            width: "140px",
            height: "113px",
            opacity: 0.9,
            background: "rgba(255, 255, 255, 0.1)",
            borderRadius: "12px",
            padding: "12px",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
          }}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="116"
            height="89"
            viewBox="146.03 296.85 517.95 418.3"
            preserveAspectRatio="xMidYMid meet"
            style={{
              filter: "drop-shadow(0 2px 4px rgba(0,0,0,0.3))",
            }}
          >
            <path
              fill="#ffffff"
              d="M 583.78125 581.773438 C 547.113281 679.367188 443.824219 735.683594 342.191406 708.183594 C 317.785156 701.597656 294.695312 689.878906 274.71875 674.371094 C 267.898438 669.144531 260.515625 663.625 258.804688 654.570312 C 256.878906 644.890625 265.722656 636.285156 275.324219 638.109375 C 283.777344 639.0625 288.34375 644.484375 294.386719 649.128906 C 345.515625 689.703125 418.039062 698.175781 476.898438 669.535156 C 501.230469 657.5625 523.132812 639.414062 539.105469 617.433594 C 543.320312 611.71875 547.304688 605.132812 550.84375 598.972656 C 552.496094 596.039062 554.164062 592.152344 555.679688 589.160156 C 555.679688 589.160156 556.867188 586.691406 556.867188 586.691406 C 557.253906 585.855469 557.546875 585 557.878906 584.144531 C 557.878906 584.144531 561.800781 573.941406 561.800781 573.941406 C 567.1875 558.707031 589.300781 566.460938 583.761719 581.792969 Z M 583.78125 581.773438"
              fillOpacity="1"
              fillRule="nonzero"
            />
            <path
              fill="#ffffff"
              d="M 232.804688 392.75 C 232.355469 381.617188 238.59375 372.328125 245.941406 364.667969 C 252.664062 356.898438 260.261719 349.921875 268.054688 343.234375 C 309.933594 308.371094 364.597656 292.105469 418.71875 298.054688 C 508.808594 307.441406 584.113281 380.992188 593.207031 471.394531 C 594.410156 486.300781 573.132812 489.390625 570.121094 474.699219 C 550.296875 366.710938 436.089844 302.347656 334.496094 344.984375 C 311.175781 354.816406 289.957031 369.820312 273.339844 388.941406 C 267.238281 396.035156 262.378906 402.371094 252.390625 405.421875 C 243.433594 408.957031 233.113281 402.46875 232.804688 392.75 Z M 232.804688 392.75"
              fillOpacity="1"
              fillRule="nonzero"
            />
            <path
              fill="#ffffff"
              d="M 492.699219 588.109375 C 487.628906 590.363281 482.632812 591.335938 477.367188 592.851562 C 474.800781 593.589844 472.160156 594.582031 469.652344 594.929688 C 467.144531 595.300781 464.753906 594.988281 462.441406 594.386719 C 453.132812 592.210938 443.882812 589.859375 434.691406 587.351562 C 416.308594 582.335938 398.15625 576.703125 380.222656 570.503906 C 308.515625 544.96875 206.375 499.785156 159.464844 437.660156 C 143.257812 415.058594 139.3125 389.777344 161.191406 369.160156 C 170.441406 360.648438 184.007812 356.722656 196.09375 357.847656 C 202.527344 358.316406 207.347656 363.910156 206.878906 370.324219 C 206.453125 376.308594 201.554688 380.914062 195.6875 381.128906 C 189.175781 381.246094 183.464844 383.304688 179.304688 387.988281 C 176.757812 390.902344 174.660156 394.808594 174.214844 398.753906 C 174.175781 401.941406 175.242188 404.953125 176.546875 407.90625 C 182.511719 419.355469 191.664062 427.730469 201.75 436.28125 C 229.148438 458.570312 260.882812 475.183594 292.988281 490.03125 C 350.238281 515.917969 410.886719 535.542969 472.488281 548.15625 C 479.933594 549.070312 484.691406 556.085938 490.738281 559.949219 C 492.816406 561.601562 494.933594 563.351562 496.953125 565.371094 C 503.988281 572.039062 501.617188 584.457031 492.699219 588.109375 Z M 492.699219 588.109375"
              fillOpacity="1"
              fillRule="nonzero"
            />
            <path
              fill="#ffffff"
              d="M 373.226562 629.753906 C 366.5 630.238281 359.992188 629.890625 353.308594 630.125 C 346.816406 630.027344 341.121094 626.625 335.078125 624.722656 C 331.113281 623.261719 327.148438 621.746094 323.226562 620.191406 C 275.886719 601.480469 229.441406 578.683594 189.585938 546.601562 C 178.644531 537.332031 190.324219 520.484375 202.820312 527.441406 C 230.414062 544.25 259.835938 557.714844 289.917969 569.53125 C 308.707031 576.933594 327.832031 583.601562 347.109375 589.703125 C 352.800781 591.878906 359.117188 592.421875 364.207031 596.019531 C 369.359375 600.175781 374.878906 603.34375 380.085938 607.582031 C 388.945312 614.558594 384.359375 629.035156 373.226562 629.753906 Z M 373.226562 629.753906"
              fillOpacity="1"
              fillRule="nonzero"
            />
            <path
              fill="#ffffff"
              d="M 339.394531 434.335938 C 343.300781 432.179688 348.234375 433.832031 352.179688 434.53125 C 363.917969 436.28125 374.957031 439.488281 385.546875 444.773438 C 399.617188 450.953125 413.820312 456.820312 428.183594 462.242188 C 477.773438 480.644531 529.351562 496.773438 582.246094 500.71875 C 596.644531 501.398438 629.757812 502.390625 635.804688 487.855469 C 639.28125 479.089844 637.046875 470.441406 629.644531 463.621094 C 619.382812 453.207031 633.101562 437.425781 644.820312 445.957031 C 664.503906 460.125 670.082031 487.777344 656.578125 508.21875 C 620.375 557.988281 487.453125 524.484375 437.082031 508.824219 C 413.996094 501.574219 391.238281 493.238281 368.832031 484.125 C 357.15625 479.945312 346.875 473.570312 337.585938 465.3125 C 337.585938 465.3125 332.804688 461.347656 332.804688 461.347656 C 332.007812 460.667969 331.289062 459.890625 330.667969 458.878906 C 325.578125 450.136719 330.53125 438.125 339.414062 434.316406 Z M 339.394531 434.335938"
              fillOpacity="1"
              fillRule="nonzero"
            />
          </svg>
        </div>
      </div>
    ),
    {
      width: 1200,
      height: 630,
      headers: {
        // Cache for 1 year (31536000 seconds) since OG images rarely change
        "Cache-Control": "public, max-age=31536000, s-maxage=31536000, stale-while-revalidate=86400",
        // Add ETag for better cache validation
        ETag: `"og-${Buffer.from(src + title).toString("base64")}"`,
        // Set content type explicitly
        "Content-Type": "image/png",
        // Add vary header to cache different versions based on query params
        Vary: "Accept",
        // Add CDN cache tags for purging if needed
        "Cache-Tag": `og-image,event-${encodeURIComponent(title)}`,
      },
    }
  );

  return response;
}
