rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Only allow users to write to their own Userdata fields. Anyone can read. Allow write if User Data does not exist.
    match /Users/{activeModifier}/Public/{userId} {
    	// GET
      allow read: if true;
      // UPDATE, DELETE
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      // CREATE
      allow create: if request.auth != null;
    }

    // Only allow users to read and write their own private Userdata fields. Allow write if User Data does not exist.
    match /Users/{activeModifier}/Private/{userId} {
    	// GET, UPDATE, DELETE
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      // CREATE
      allow create: if request.auth != null;

    }

    // Only organisers can write to their EventData fields. Everyone can read. Allow write if EventsData doesn't exist initially.
    match /Events/{activeModifier}/{accessModifier}/{eventId} {
    	// GET
      allow read: if true;
      // UPDATE, DELETE
      allow update, delete: if request.auth != null 
      && request.auth.uid == get(/databases/$(database)/documents/Events/$(activeModifier)/$(accessModifier)/$(eventId)).data.organiserId;
      // UPDATE accessCount
      allow write: if (request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['accessCount']));
      // CREATE
      allow create: if request.auth != null;
    }

    // Only events organisers can read and write to their Events metadata fields. Allow write if EventsMetadata doesn't exist initially.
    match /EventsMetadata/{eventId} {
    	// GET, UPDATE, DELETE
      allow read, update, delete: if request.auth != null 
      && request.auth.uid == get(/databases/$(database)/documents/EventsMetadata/$(eventId)).data.organiserId;
      // CREATE
      allow create: if request.auth != null;
    }

    // No one can access the Attendees Table
    match /Attendees/emails/{emailHash}/{eventId} {
      allow read, write: if false;
    }

    // Everyone can read Orders Table if they have the correct id. No one can overwrite and mutate exsiting data
    match /Orders/{orderId} {
    	// GET
      allow read: if true;
      // CREATE
      allow create: if true;
    }

    // Everyone can read Tickets Table if they have the correct id. No one can overwrite and mutate exsiting data
    match /Tickets/{ticketId} {
      // GET
      allow read: if true;
      // CREATE
      allow create: if true;
    }
    
    // Everyone can read and write to tags for now
    match /EventTags/{eventTags} {
    	allow read, write: if true;
    }

    // Everyone can read, and write to TempUser table.
    match /TempUsers/{userId} {
      //can read if same user
      allow read, delete: if request.auth != null && request.auth.uid == userId;
      //allow create
      allow create: if request.auth != null;
    }

    match /DeletedEvents/{eventId} {
      // GET
      allow read: if request.auth != null && resource.data.organiserId == request.auth.uid;
      // CREATE
      allow create: if request.auth != null;
    }
  }
}
